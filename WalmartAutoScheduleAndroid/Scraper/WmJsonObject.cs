// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WalmartApi;
//
//    var itemQueryInStore = ItemQueryInStore.FromJson(jsonString);

namespace WalmartApi
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WmJsonObject
    {
        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("payload")]
        public Payload Payload { get; set; }
    }

    public partial class Payload
    {
        [JsonProperty("associates")]
        public List<Associate> Associates { get; set; }
    }

    public partial class Associate
    {
        [JsonProperty("winNbr")]
        public long WinNbr { get; set; }

        [JsonProperty("sourceInfo")]
        public string SourceInfo { get; set; }

        [JsonProperty("weeks")]
        public List<Week> Weeks { get; set; }
    }

    public partial class Week
    {
        [JsonProperty("scheduleWeekStartDate")]
        public DateTimeOffset ScheduleWeekStartDate { get; set; }

        [JsonProperty("scheduleWeekEndDate")]
        public DateTimeOffset ScheduleWeekEndDate { get; set; }

        [JsonProperty("wmWeek")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WmWeek { get; set; }

        [JsonProperty("schedule")]
        public List<Schedule> Schedule { get; set; }
    }

    public partial class Schedule
    {
        [JsonProperty("scheduleId")]
        public long ScheduleId { get; set; }

        [JsonProperty("shiftStartTime")]
        public string ShiftStartTime { get; set; }

        [JsonProperty("shiftEndTime")]
        public string ShiftEndTime { get; set; }

        [JsonProperty("storeNumber")]
        public long StoreNumber { get; set; }

        [JsonProperty("events")]
        public List<Event> Events { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("startTime")]
        public string StartTime { get; set; }

        [JsonProperty("endTime")]
        public string EndTime { get; set; }

        [JsonProperty("jobCode")]
        public string JobCode { get; set; }

        [JsonProperty("jobDescription")]
        public string JobDescription { get; set; }
    }



    public enum TypeEnum { Job, Meal };

    public partial class ItemQueryInStore
    {
        public static ItemQueryInStore FromJson(string json) => JsonConvert.DeserializeObject<ItemQueryInStore>(json, WalmartApi.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ItemQueryInStore self) => JsonConvert.SerializeObject(self, WalmartApi.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }




    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Meal":
                    return TypeEnum.Meal;
                case "job":
                    return TypeEnum.Job;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Meal:
                    serializer.Serialize(writer, "Meal");
                    return;
                case TypeEnum.Job:
                    serializer.Serialize(writer, "job");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
